//go:build go1.22

// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// バケットの削除
	// (DELETE /fed/v1/buckets/{bucket_name})
	DeleteBucket(w http.ResponseWriter, r *http.Request, bucketName BucketName)
	// バケットの作成
	// (PUT /fed/v1/buckets/{bucket_name})
	CreateBucket(w http.ResponseWriter, r *http.Request, bucketName BucketName)
	// サイト一覧の取得
	// (GET /fed/v1/clusters)
	GetClusters(w http.ResponseWriter, r *http.Request)
	// サイトの取得
	// (GET /fed/v1/clusters/{site_id})
	GetCluster(w http.ResponseWriter, r *http.Request, siteId string)
	// サイトアカウントの削除
	// (DELETE /{site_id}/v2/account)
	DeleteAccount(w http.ResponseWriter, r *http.Request, siteId string)
	// サイトアカウントの取得
	// (GET /{site_id}/v2/account)
	GetAccount(w http.ResponseWriter, r *http.Request, siteId string)
	// サイトアカウントの作成
	// (POST /{site_id}/v2/account)
	CreateAccount(w http.ResponseWriter, r *http.Request, siteId string)
	// サイトアカウントのアクセスキーの取得
	// (GET /{site_id}/v2/account/keys)
	GetAccountKeys(w http.ResponseWriter, r *http.Request, siteId string)
	// サイトアカウントのアクセスキーの発行
	// (POST /{site_id}/v2/account/keys)
	CreateAccountKey(w http.ResponseWriter, r *http.Request, siteId string)
	// サイトアカウントのアクセスキーの削除
	// (DELETE /{site_id}/v2/account/keys/{account_key_id})
	DeleteAccountKey(w http.ResponseWriter, r *http.Request, siteId string, accountKeyId AccessKeyID)
	// サイトアカウントのアクセスキーの取得
	// (GET /{site_id}/v2/account/keys/{account_key_id})
	GetAccountKey(w http.ResponseWriter, r *http.Request, siteId string, accountKeyId AccessKeyID)
	// パーミッション一覧の取得
	// (GET /{site_id}/v2/permissions)
	GetPermissions(w http.ResponseWriter, r *http.Request, siteId string)
	// パーミッションの作成
	// (POST /{site_id}/v2/permissions)
	CreatePermission(w http.ResponseWriter, r *http.Request, siteId string)
	// パーミッションの削除
	// (DELETE /{site_id}/v2/permissions/{permission_id})
	DeletePermission(w http.ResponseWriter, r *http.Request, siteId string, permissionId PermissionID)
	// パーミッションの取得
	// (GET /{site_id}/v2/permissions/{permission_id})
	GetPermission(w http.ResponseWriter, r *http.Request, siteId string, permissionId PermissionID)
	// パーミッションの更新
	// (PUT /{site_id}/v2/permissions/{permission_id})
	UpdatePermission(w http.ResponseWriter, r *http.Request, siteId string, permissionId PermissionID)
	// パーミッションが保有するアクセスキー一覧の取得
	// (GET /{site_id}/v2/permissions/{permission_id}/keys)
	GetPermissionKeys(w http.ResponseWriter, r *http.Request, siteId string, permissionId PermissionID)
	// パーミッションのアクセスキーの発行
	// (POST /{site_id}/v2/permissions/{permission_id}/keys)
	CreatePermissionKey(w http.ResponseWriter, r *http.Request, siteId string, permissionId PermissionID)
	// パーミッションが保有するアクセスキーの削除
	// (DELETE /{site_id}/v2/permissions/{permission_id}/keys/{permission_key_id})
	DeletePermissionKey(w http.ResponseWriter, r *http.Request, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID)
	// パーミッションが保有するアクセスキーの取得
	// (GET /{site_id}/v2/permissions/{permission_id}/keys/{permission_key_id})
	GetPermissionKey(w http.ResponseWriter, r *http.Request, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID)
	// サイトのステータスの取得
	// (GET /{site_id}/v2/status)
	GetStatus(w http.ResponseWriter, r *http.Request, siteId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteBucket operation middleware
func (siw *ServerInterfaceWrapper) DeleteBucket(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "bucket_name" -------------
	var bucketName BucketName

	err = runtime.BindStyledParameterWithOptions("simple", "bucket_name", r.PathValue("bucket_name"), &bucketName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bucket_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBucket(w, r, bucketName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateBucket operation middleware
func (siw *ServerInterfaceWrapper) CreateBucket(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "bucket_name" -------------
	var bucketName BucketName

	err = runtime.BindStyledParameterWithOptions("simple", "bucket_name", r.PathValue("bucket_name"), &bucketName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bucket_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBucket(w, r, bucketName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusters operation middleware
func (siw *ServerInterfaceWrapper) GetClusters(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusters(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCluster operation middleware
func (siw *ServerInterfaceWrapper) GetCluster(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCluster(w, r, siteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAccount operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAccount(w, r, siteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAccount operation middleware
func (siw *ServerInterfaceWrapper) GetAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccount(w, r, siteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAccount operation middleware
func (siw *ServerInterfaceWrapper) CreateAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAccount(w, r, siteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAccountKeys operation middleware
func (siw *ServerInterfaceWrapper) GetAccountKeys(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccountKeys(w, r, siteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAccountKey operation middleware
func (siw *ServerInterfaceWrapper) CreateAccountKey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAccountKey(w, r, siteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAccountKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccountKey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	// ------------- Path parameter "account_key_id" -------------
	var accountKeyId AccessKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "account_key_id", r.PathValue("account_key_id"), &accountKeyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account_key_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAccountKey(w, r, siteId, accountKeyId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAccountKey operation middleware
func (siw *ServerInterfaceWrapper) GetAccountKey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	// ------------- Path parameter "account_key_id" -------------
	var accountKeyId AccessKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "account_key_id", r.PathValue("account_key_id"), &accountKeyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account_key_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccountKey(w, r, siteId, accountKeyId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetPermissions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPermissions(w, r, siteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePermission operation middleware
func (siw *ServerInterfaceWrapper) CreatePermission(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePermission(w, r, siteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePermission operation middleware
func (siw *ServerInterfaceWrapper) DeletePermission(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", r.PathValue("permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePermission(w, r, siteId, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPermission operation middleware
func (siw *ServerInterfaceWrapper) GetPermission(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", r.PathValue("permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPermission(w, r, siteId, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePermission operation middleware
func (siw *ServerInterfaceWrapper) UpdatePermission(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", r.PathValue("permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePermission(w, r, siteId, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPermissionKeys operation middleware
func (siw *ServerInterfaceWrapper) GetPermissionKeys(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", r.PathValue("permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPermissionKeys(w, r, siteId, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePermissionKey operation middleware
func (siw *ServerInterfaceWrapper) CreatePermissionKey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", r.PathValue("permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePermissionKey(w, r, siteId, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePermissionKey operation middleware
func (siw *ServerInterfaceWrapper) DeletePermissionKey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", r.PathValue("permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	// ------------- Path parameter "permission_key_id" -------------
	var permissionKeyId AccessKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_key_id", r.PathValue("permission_key_id"), &permissionKeyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_key_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePermissionKey(w, r, siteId, permissionId, permissionKeyId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPermissionKey operation middleware
func (siw *ServerInterfaceWrapper) GetPermissionKey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", r.PathValue("permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	// ------------- Path parameter "permission_key_id" -------------
	var permissionKeyId AccessKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_key_id", r.PathValue("permission_key_id"), &permissionKeyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_key_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPermissionKey(w, r, siteId, permissionId, permissionKeyId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", r.PathValue("site_id"), &siteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r, siteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("DELETE "+options.BaseURL+"/fed/v1/buckets/{bucket_name}", wrapper.DeleteBucket)
	m.HandleFunc("PUT "+options.BaseURL+"/fed/v1/buckets/{bucket_name}", wrapper.CreateBucket)
	m.HandleFunc("GET "+options.BaseURL+"/fed/v1/clusters", wrapper.GetClusters)
	m.HandleFunc("GET "+options.BaseURL+"/fed/v1/clusters/{site_id}", wrapper.GetCluster)
	m.HandleFunc("DELETE "+options.BaseURL+"/{site_id}/v2/account", wrapper.DeleteAccount)
	m.HandleFunc("GET "+options.BaseURL+"/{site_id}/v2/account", wrapper.GetAccount)
	m.HandleFunc("POST "+options.BaseURL+"/{site_id}/v2/account", wrapper.CreateAccount)
	m.HandleFunc("GET "+options.BaseURL+"/{site_id}/v2/account/keys", wrapper.GetAccountKeys)
	m.HandleFunc("POST "+options.BaseURL+"/{site_id}/v2/account/keys", wrapper.CreateAccountKey)
	m.HandleFunc("DELETE "+options.BaseURL+"/{site_id}/v2/account/keys/{account_key_id}", wrapper.DeleteAccountKey)
	m.HandleFunc("GET "+options.BaseURL+"/{site_id}/v2/account/keys/{account_key_id}", wrapper.GetAccountKey)
	m.HandleFunc("GET "+options.BaseURL+"/{site_id}/v2/permissions", wrapper.GetPermissions)
	m.HandleFunc("POST "+options.BaseURL+"/{site_id}/v2/permissions", wrapper.CreatePermission)
	m.HandleFunc("DELETE "+options.BaseURL+"/{site_id}/v2/permissions/{permission_id}", wrapper.DeletePermission)
	m.HandleFunc("GET "+options.BaseURL+"/{site_id}/v2/permissions/{permission_id}", wrapper.GetPermission)
	m.HandleFunc("PUT "+options.BaseURL+"/{site_id}/v2/permissions/{permission_id}", wrapper.UpdatePermission)
	m.HandleFunc("GET "+options.BaseURL+"/{site_id}/v2/permissions/{permission_id}/keys", wrapper.GetPermissionKeys)
	m.HandleFunc("POST "+options.BaseURL+"/{site_id}/v2/permissions/{permission_id}/keys", wrapper.CreatePermissionKey)
	m.HandleFunc("DELETE "+options.BaseURL+"/{site_id}/v2/permissions/{permission_id}/keys/{permission_key_id}", wrapper.DeletePermissionKey)
	m.HandleFunc("GET "+options.BaseURL+"/{site_id}/v2/permissions/{permission_id}/keys/{permission_key_id}", wrapper.GetPermissionKey)
	m.HandleFunc("GET "+options.BaseURL+"/{site_id}/v2/status", wrapper.GetStatus)

	return m
}
