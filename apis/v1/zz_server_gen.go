// Copyright 2022 The sacloud/object-storage-api-go authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// バケットの削除
	// (DELETE /fed/v1/buckets/{name})
	DeleteBucket(c *gin.Context, name string)
	// バケットの作成
	// (PUT /fed/v1/buckets/{name})
	CreateBucket(c *gin.Context, name string)
	// サイト一覧の取得
	// (GET /fed/v1/clusters)
	ListClusters(c *gin.Context)
	// サイトの取得
	// (GET /fed/v1/clusters/{id})
	ReadCluster(c *gin.Context, id string)
	// サイトアカウントの削除
	// (DELETE /{site_name}/v2/account)
	DeleteSiteAccount(c *gin.Context, siteName string)
	// サイトアカウントの取得
	// (GET /{site_name}/v2/account)
	ReadSiteAccount(c *gin.Context, siteName string)
	// サイトアカウントの作成
	// (POST /{site_name}/v2/account)
	CreateSiteAccount(c *gin.Context, siteName string)
	// サイトアカウントのアクセスキーの取得
	// (GET /{site_name}/v2/account/keys)
	ListAccountAccessKeys(c *gin.Context, siteName string)
	// サイトアカウントのアクセスキーの発行
	// (POST /{site_name}/v2/account/keys)
	CreateAccountAccessKey(c *gin.Context, siteName string)
	// サイトアカウントのアクセスキーの削除
	// (DELETE /{site_name}/v2/account/keys/{id})
	DeleteAccountAccessKey(c *gin.Context, siteName string, id string)
	// サイトアカウントのアクセスキーの取得
	// (GET /{site_name}/v2/account/keys/{id})
	ReadAccountAccessKey(c *gin.Context, siteName string, id string)
	// パーミッション一覧の取得
	// (GET /{site_name}/v2/permissions)
	ListPermissions(c *gin.Context, siteName string)
	// パーミッションの作成
	// (POST /{site_name}/v2/permissions)
	CreatePermission(c *gin.Context, siteName string)
	// パーミッションの削除
	// (DELETE /{site_name}/v2/permissions/{id})
	DeletePermission(c *gin.Context, siteName string, id string)
	// パーミッションの取得
	// (GET /{site_name}/v2/permissions/{id})
	ReadPermission(c *gin.Context, siteName string, id string)
	// パーミッションの更新
	// (PUT /{site_name}/v2/permissions/{id})
	UpdatePermission(c *gin.Context, siteName string, id string)
	// パーミッションが保有するアクセスキー一覧の取得
	// (GET /{site_name}/v2/permissions/{id}/keys)
	ListPermissionAccessKeys(c *gin.Context, siteName string, id string)
	// パーミッションのアクセスキーの発行
	// (POST /{site_name}/v2/permissions/{id}/keys)
	CreatePermissionAccessKey(c *gin.Context, siteName string, id string)
	// パーミッションが保有するアクセスキーの削除
	// (DELETE /{site_name}/v2/permissions/{id}/keys/{key_id})
	DeletePermissionAccessKey(c *gin.Context, siteName string, id string, keyId string)
	// パーミッションが保有するアクセスキーの取得
	// (GET /{site_name}/v2/permissions/{id}/keys/{key_id})
	ReadPermissionAccessKey(c *gin.Context, siteName string, id string, keyId string)
	// サイトのステータスの取得
	// (GET /{site_name}/v2/status)
	ReadSiteStatus(c *gin.Context, siteName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// DeleteBucket operation middleware
func (siw *ServerInterfaceWrapper) DeleteBucket(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", c.Param("name"), &name)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteBucket(c, name)
}

// CreateBucket operation middleware
func (siw *ServerInterfaceWrapper) CreateBucket(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", c.Param("name"), &name)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateBucket(c, name)
}

// ListClusters operation middleware
func (siw *ServerInterfaceWrapper) ListClusters(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListClusters(c)
}

// ReadCluster operation middleware
func (siw *ServerInterfaceWrapper) ReadCluster(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ReadCluster(c, id)
}

// DeleteSiteAccount operation middleware
func (siw *ServerInterfaceWrapper) DeleteSiteAccount(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteSiteAccount(c, siteName)
}

// ReadSiteAccount operation middleware
func (siw *ServerInterfaceWrapper) ReadSiteAccount(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ReadSiteAccount(c, siteName)
}

// CreateSiteAccount operation middleware
func (siw *ServerInterfaceWrapper) CreateSiteAccount(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateSiteAccount(c, siteName)
}

// ListAccountAccessKeys operation middleware
func (siw *ServerInterfaceWrapper) ListAccountAccessKeys(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListAccountAccessKeys(c, siteName)
}

// CreateAccountAccessKey operation middleware
func (siw *ServerInterfaceWrapper) CreateAccountAccessKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateAccountAccessKey(c, siteName)
}

// DeleteAccountAccessKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccountAccessKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAccountAccessKey(c, siteName, id)
}

// ReadAccountAccessKey operation middleware
func (siw *ServerInterfaceWrapper) ReadAccountAccessKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ReadAccountAccessKey(c, siteName, id)
}

// ListPermissions operation middleware
func (siw *ServerInterfaceWrapper) ListPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListPermissions(c, siteName)
}

// CreatePermission operation middleware
func (siw *ServerInterfaceWrapper) CreatePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreatePermission(c, siteName)
}

// DeletePermission operation middleware
func (siw *ServerInterfaceWrapper) DeletePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeletePermission(c, siteName, id)
}

// ReadPermission operation middleware
func (siw *ServerInterfaceWrapper) ReadPermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ReadPermission(c, siteName, id)
}

// UpdatePermission operation middleware
func (siw *ServerInterfaceWrapper) UpdatePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdatePermission(c, siteName, id)
}

// ListPermissionAccessKeys operation middleware
func (siw *ServerInterfaceWrapper) ListPermissionAccessKeys(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListPermissionAccessKeys(c, siteName, id)
}

// CreatePermissionAccessKey operation middleware
func (siw *ServerInterfaceWrapper) CreatePermissionAccessKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreatePermissionAccessKey(c, siteName, id)
}

// DeletePermissionAccessKey operation middleware
func (siw *ServerInterfaceWrapper) DeletePermissionAccessKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	// ------------- Path parameter "key_id" -------------
	var keyId string

	err = runtime.BindStyledParameter("simple", false, "key_id", c.Param("key_id"), &keyId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter key_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeletePermissionAccessKey(c, siteName, id, keyId)
}

// ReadPermissionAccessKey operation middleware
func (siw *ServerInterfaceWrapper) ReadPermissionAccessKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	// ------------- Path parameter "key_id" -------------
	var keyId string

	err = runtime.BindStyledParameter("simple", false, "key_id", c.Param("key_id"), &keyId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter key_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ReadPermissionAccessKey(c, siteName, id, keyId)
}

// ReadSiteStatus operation middleware
func (siw *ServerInterfaceWrapper) ReadSiteStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_name" -------------
	var siteName string

	err = runtime.BindStyledParameter("simple", false, "site_name", c.Param("site_name"), &siteName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter site_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ReadSiteStatus(c, siteName)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.DELETE(options.BaseURL+"/fed/v1/buckets/:name", wrapper.DeleteBucket)

	router.PUT(options.BaseURL+"/fed/v1/buckets/:name", wrapper.CreateBucket)

	router.GET(options.BaseURL+"/fed/v1/clusters", wrapper.ListClusters)

	router.GET(options.BaseURL+"/fed/v1/clusters/:id", wrapper.ReadCluster)

	router.DELETE(options.BaseURL+"/:site_name/v2/account", wrapper.DeleteSiteAccount)

	router.GET(options.BaseURL+"/:site_name/v2/account", wrapper.ReadSiteAccount)

	router.POST(options.BaseURL+"/:site_name/v2/account", wrapper.CreateSiteAccount)

	router.GET(options.BaseURL+"/:site_name/v2/account/keys", wrapper.ListAccountAccessKeys)

	router.POST(options.BaseURL+"/:site_name/v2/account/keys", wrapper.CreateAccountAccessKey)

	router.DELETE(options.BaseURL+"/:site_name/v2/account/keys/:id", wrapper.DeleteAccountAccessKey)

	router.GET(options.BaseURL+"/:site_name/v2/account/keys/:id", wrapper.ReadAccountAccessKey)

	router.GET(options.BaseURL+"/:site_name/v2/permissions", wrapper.ListPermissions)

	router.POST(options.BaseURL+"/:site_name/v2/permissions", wrapper.CreatePermission)

	router.DELETE(options.BaseURL+"/:site_name/v2/permissions/:id", wrapper.DeletePermission)

	router.GET(options.BaseURL+"/:site_name/v2/permissions/:id", wrapper.ReadPermission)

	router.PUT(options.BaseURL+"/:site_name/v2/permissions/:id", wrapper.UpdatePermission)

	router.GET(options.BaseURL+"/:site_name/v2/permissions/:id/keys", wrapper.ListPermissionAccessKeys)

	router.POST(options.BaseURL+"/:site_name/v2/permissions/:id/keys", wrapper.CreatePermissionAccessKey)

	router.DELETE(options.BaseURL+"/:site_name/v2/permissions/:id/keys/:key_id", wrapper.DeletePermissionAccessKey)

	router.GET(options.BaseURL+"/:site_name/v2/permissions/:id/keys/:key_id", wrapper.ReadPermissionAccessKey)

	router.GET(options.BaseURL+"/:site_name/v2/status", wrapper.ReadSiteStatus)

	return router
}
