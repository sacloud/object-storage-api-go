// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// バケットの削除
	// (DELETE /fed/v1/buckets/{bucket_name})
	DeleteBucket(c *gin.Context, bucketName BucketName)
	// バケットの作成
	// (PUT /fed/v1/buckets/{bucket_name})
	CreateBucket(c *gin.Context, bucketName BucketName)
	// サイト一覧の取得
	// (GET /fed/v1/clusters)
	GetClusters(c *gin.Context)
	// サイトの取得
	// (GET /fed/v1/clusters/{site_id})
	GetCluster(c *gin.Context, siteId string)
	// サイトアカウントの削除
	// (DELETE /{site_id}/v2/account)
	DeleteAccount(c *gin.Context, siteId string)
	// サイトアカウントの取得
	// (GET /{site_id}/v2/account)
	GetAccount(c *gin.Context, siteId string)
	// サイトアカウントの作成
	// (POST /{site_id}/v2/account)
	CreateAccount(c *gin.Context, siteId string)
	// サイトアカウントのアクセスキーの取得
	// (GET /{site_id}/v2/account/keys)
	GetAccountKeys(c *gin.Context, siteId string)
	// サイトアカウントのアクセスキーの発行
	// (POST /{site_id}/v2/account/keys)
	CreateAccountKey(c *gin.Context, siteId string)
	// サイトアカウントのアクセスキーの削除
	// (DELETE /{site_id}/v2/account/keys/{account_key_id})
	DeleteAccountKey(c *gin.Context, siteId string, accountKeyId AccessKeyID)
	// サイトアカウントのアクセスキーの取得
	// (GET /{site_id}/v2/account/keys/{account_key_id})
	GetAccountKey(c *gin.Context, siteId string, accountKeyId AccessKeyID)
	// パーミッション一覧の取得
	// (GET /{site_id}/v2/permissions)
	GetPermissions(c *gin.Context, siteId string)
	// パーミッションの作成
	// (POST /{site_id}/v2/permissions)
	CreatePermission(c *gin.Context, siteId string)
	// パーミッションの削除
	// (DELETE /{site_id}/v2/permissions/{permission_id})
	DeletePermission(c *gin.Context, siteId string, permissionId PermissionID)
	// パーミッションの取得
	// (GET /{site_id}/v2/permissions/{permission_id})
	GetPermission(c *gin.Context, siteId string, permissionId PermissionID)
	// パーミッションの更新
	// (PUT /{site_id}/v2/permissions/{permission_id})
	UpdatePermission(c *gin.Context, siteId string, permissionId PermissionID)
	// パーミッションが保有するアクセスキー一覧の取得
	// (GET /{site_id}/v2/permissions/{permission_id}/keys)
	GetPermissionKeys(c *gin.Context, siteId string, permissionId PermissionID)
	// パーミッションのアクセスキーの発行
	// (POST /{site_id}/v2/permissions/{permission_id}/keys)
	CreatePermissionKey(c *gin.Context, siteId string, permissionId PermissionID)
	// パーミッションが保有するアクセスキーの削除
	// (DELETE /{site_id}/v2/permissions/{permission_id}/keys/{permission_key_id})
	DeletePermissionKey(c *gin.Context, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID)
	// パーミッションが保有するアクセスキーの取得
	// (GET /{site_id}/v2/permissions/{permission_id}/keys/{permission_key_id})
	GetPermissionKey(c *gin.Context, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID)
	// サイトのステータスの取得
	// (GET /{site_id}/v2/status)
	GetStatus(c *gin.Context, siteId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteBucket operation middleware
func (siw *ServerInterfaceWrapper) DeleteBucket(c *gin.Context) {

	var err error

	// ------------- Path parameter "bucket_name" -------------
	var bucketName BucketName

	err = runtime.BindStyledParameterWithOptions("simple", "bucket_name", c.Param("bucket_name"), &bucketName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bucket_name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteBucket(c, bucketName)
}

// CreateBucket operation middleware
func (siw *ServerInterfaceWrapper) CreateBucket(c *gin.Context) {

	var err error

	// ------------- Path parameter "bucket_name" -------------
	var bucketName BucketName

	err = runtime.BindStyledParameterWithOptions("simple", "bucket_name", c.Param("bucket_name"), &bucketName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bucket_name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBucket(c, bucketName)
}

// GetClusters operation middleware
func (siw *ServerInterfaceWrapper) GetClusters(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetClusters(c)
}

// GetCluster operation middleware
func (siw *ServerInterfaceWrapper) GetCluster(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCluster(c, siteId)
}

// DeleteAccount operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccount(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAccount(c, siteId)
}

// GetAccount operation middleware
func (siw *ServerInterfaceWrapper) GetAccount(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccount(c, siteId)
}

// CreateAccount operation middleware
func (siw *ServerInterfaceWrapper) CreateAccount(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAccount(c, siteId)
}

// GetAccountKeys operation middleware
func (siw *ServerInterfaceWrapper) GetAccountKeys(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccountKeys(c, siteId)
}

// CreateAccountKey operation middleware
func (siw *ServerInterfaceWrapper) CreateAccountKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAccountKey(c, siteId)
}

// DeleteAccountKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccountKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "account_key_id" -------------
	var accountKeyId AccessKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "account_key_id", c.Param("account_key_id"), &accountKeyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_key_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAccountKey(c, siteId, accountKeyId)
}

// GetAccountKey operation middleware
func (siw *ServerInterfaceWrapper) GetAccountKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "account_key_id" -------------
	var accountKeyId AccessKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "account_key_id", c.Param("account_key_id"), &accountKeyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_key_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccountKey(c, siteId, accountKeyId)
}

// GetPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPermissions(c, siteId)
}

// CreatePermission operation middleware
func (siw *ServerInterfaceWrapper) CreatePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePermission(c, siteId)
}

// DeletePermission operation middleware
func (siw *ServerInterfaceWrapper) DeletePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", c.Param("permission_id"), &permissionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePermission(c, siteId, permissionId)
}

// GetPermission operation middleware
func (siw *ServerInterfaceWrapper) GetPermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", c.Param("permission_id"), &permissionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPermission(c, siteId, permissionId)
}

// UpdatePermission operation middleware
func (siw *ServerInterfaceWrapper) UpdatePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", c.Param("permission_id"), &permissionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePermission(c, siteId, permissionId)
}

// GetPermissionKeys operation middleware
func (siw *ServerInterfaceWrapper) GetPermissionKeys(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", c.Param("permission_id"), &permissionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPermissionKeys(c, siteId, permissionId)
}

// CreatePermissionKey operation middleware
func (siw *ServerInterfaceWrapper) CreatePermissionKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", c.Param("permission_id"), &permissionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePermissionKey(c, siteId, permissionId)
}

// DeletePermissionKey operation middleware
func (siw *ServerInterfaceWrapper) DeletePermissionKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", c.Param("permission_id"), &permissionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "permission_key_id" -------------
	var permissionKeyId AccessKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_key_id", c.Param("permission_key_id"), &permissionKeyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_key_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePermissionKey(c, siteId, permissionId, permissionKeyId)
}

// GetPermissionKey operation middleware
func (siw *ServerInterfaceWrapper) GetPermissionKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", c.Param("permission_id"), &permissionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "permission_key_id" -------------
	var permissionKeyId AccessKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_key_id", c.Param("permission_key_id"), &permissionKeyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permission_key_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPermissionKey(c, siteId, permissionId, permissionKeyId)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "site_id" -------------
	var siteId string

	err = runtime.BindStyledParameterWithOptions("simple", "site_id", c.Param("site_id"), &siteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter site_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStatus(c, siteId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/fed/v1/buckets/:bucket_name", wrapper.DeleteBucket)
	router.PUT(options.BaseURL+"/fed/v1/buckets/:bucket_name", wrapper.CreateBucket)
	router.GET(options.BaseURL+"/fed/v1/clusters", wrapper.GetClusters)
	router.GET(options.BaseURL+"/fed/v1/clusters/:site_id", wrapper.GetCluster)
	router.DELETE(options.BaseURL+"/:site_id/v2/account", wrapper.DeleteAccount)
	router.GET(options.BaseURL+"/:site_id/v2/account", wrapper.GetAccount)
	router.POST(options.BaseURL+"/:site_id/v2/account", wrapper.CreateAccount)
	router.GET(options.BaseURL+"/:site_id/v2/account/keys", wrapper.GetAccountKeys)
	router.POST(options.BaseURL+"/:site_id/v2/account/keys", wrapper.CreateAccountKey)
	router.DELETE(options.BaseURL+"/:site_id/v2/account/keys/:account_key_id", wrapper.DeleteAccountKey)
	router.GET(options.BaseURL+"/:site_id/v2/account/keys/:account_key_id", wrapper.GetAccountKey)
	router.GET(options.BaseURL+"/:site_id/v2/permissions", wrapper.GetPermissions)
	router.POST(options.BaseURL+"/:site_id/v2/permissions", wrapper.CreatePermission)
	router.DELETE(options.BaseURL+"/:site_id/v2/permissions/:permission_id", wrapper.DeletePermission)
	router.GET(options.BaseURL+"/:site_id/v2/permissions/:permission_id", wrapper.GetPermission)
	router.PUT(options.BaseURL+"/:site_id/v2/permissions/:permission_id", wrapper.UpdatePermission)
	router.GET(options.BaseURL+"/:site_id/v2/permissions/:permission_id/keys", wrapper.GetPermissionKeys)
	router.POST(options.BaseURL+"/:site_id/v2/permissions/:permission_id/keys", wrapper.CreatePermissionKey)
	router.DELETE(options.BaseURL+"/:site_id/v2/permissions/:permission_id/keys/:permission_key_id", wrapper.DeletePermissionKey)
	router.GET(options.BaseURL+"/:site_id/v2/permissions/:permission_id/keys/:permission_key_id", wrapper.GetPermissionKey)
	router.GET(options.BaseURL+"/:site_id/v2/status", wrapper.GetStatus)
}
