// Copyright 2022 The sacloud/object-storage-api-go authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteBucket request with any body
	DeleteBucketWithBody(ctx context.Context, bucketName BucketName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteBucket(ctx context.Context, bucketName BucketName, body DeleteBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBucket request with any body
	CreateBucketWithBody(ctx context.Context, bucketName BucketName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBucket(ctx context.Context, bucketName BucketName, body CreateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListClusters request
	ListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadCluster request
	ReadCluster(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSiteAccount request
	DeleteSiteAccount(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSiteAccount request
	ReadSiteAccount(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSiteAccount request
	CreateSiteAccount(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAccountAccessKeys request
	ListAccountAccessKeys(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountAccessKey request
	CreateAccountAccessKey(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccountAccessKey request
	DeleteAccountAccessKey(ctx context.Context, siteId string, accountKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadAccountAccessKey request
	ReadAccountAccessKey(ctx context.Context, siteId string, accountKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPermissions request
	ListPermissions(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePermission request with any body
	CreatePermissionWithBody(ctx context.Context, siteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePermission(ctx context.Context, siteId string, body CreatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePermission request
	DeletePermission(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadPermission request
	ReadPermission(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePermission request with any body
	UpdatePermissionWithBody(ctx context.Context, siteId string, permissionId PermissionID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePermission(ctx context.Context, siteId string, permissionId PermissionID, body UpdatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPermissionAccessKeys request
	ListPermissionAccessKeys(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePermissionAccessKey request
	CreatePermissionAccessKey(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePermissionAccessKey request
	DeletePermissionAccessKey(ctx context.Context, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadPermissionAccessKey request
	ReadPermissionAccessKey(ctx context.Context, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSiteStatus request
	ReadSiteStatus(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteBucketWithBody(ctx context.Context, bucketName BucketName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBucketRequestWithBody(c.Server, bucketName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBucket(ctx context.Context, bucketName BucketName, body DeleteBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBucketRequest(c.Server, bucketName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBucketWithBody(ctx context.Context, bucketName BucketName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBucketRequestWithBody(c.Server, bucketName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBucket(ctx context.Context, bucketName BucketName, body CreateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBucketRequest(c.Server, bucketName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadCluster(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadClusterRequest(c.Server, siteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSiteAccount(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSiteAccountRequest(c.Server, siteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSiteAccount(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSiteAccountRequest(c.Server, siteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSiteAccount(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSiteAccountRequest(c.Server, siteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAccountAccessKeys(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAccountAccessKeysRequest(c.Server, siteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountAccessKey(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountAccessKeyRequest(c.Server, siteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountAccessKey(ctx context.Context, siteId string, accountKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountAccessKeyRequest(c.Server, siteId, accountKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadAccountAccessKey(ctx context.Context, siteId string, accountKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadAccountAccessKeyRequest(c.Server, siteId, accountKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPermissions(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPermissionsRequest(c.Server, siteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePermissionWithBody(ctx context.Context, siteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePermissionRequestWithBody(c.Server, siteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePermission(ctx context.Context, siteId string, body CreatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePermissionRequest(c.Server, siteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePermission(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePermissionRequest(c.Server, siteId, permissionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadPermission(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadPermissionRequest(c.Server, siteId, permissionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePermissionWithBody(ctx context.Context, siteId string, permissionId PermissionID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePermissionRequestWithBody(c.Server, siteId, permissionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePermission(ctx context.Context, siteId string, permissionId PermissionID, body UpdatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePermissionRequest(c.Server, siteId, permissionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPermissionAccessKeys(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPermissionAccessKeysRequest(c.Server, siteId, permissionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePermissionAccessKey(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePermissionAccessKeyRequest(c.Server, siteId, permissionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePermissionAccessKey(ctx context.Context, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePermissionAccessKeyRequest(c.Server, siteId, permissionId, permissionKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadPermissionAccessKey(ctx context.Context, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadPermissionAccessKeyRequest(c.Server, siteId, permissionId, permissionKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSiteStatus(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSiteStatusRequest(c.Server, siteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteBucketRequest calls the generic DeleteBucket builder with application/json body
func NewDeleteBucketRequest(server string, bucketName BucketName, body DeleteBucketJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteBucketRequestWithBody(server, bucketName, "application/json", bodyReader)
}

// NewDeleteBucketRequestWithBody generates requests for DeleteBucket with any type of body
func NewDeleteBucketRequestWithBody(server string, bucketName BucketName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fed/v1/buckets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateBucketRequest calls the generic CreateBucket builder with application/json body
func NewCreateBucketRequest(server string, bucketName BucketName, body CreateBucketJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBucketRequestWithBody(server, bucketName, "application/json", bodyReader)
}

// NewCreateBucketRequestWithBody generates requests for CreateBucket with any type of body
func NewCreateBucketRequestWithBody(server string, bucketName BucketName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_name", runtime.ParamLocationPath, bucketName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fed/v1/buckets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListClustersRequest generates requests for ListClusters
func NewListClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fed/v1/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadClusterRequest generates requests for ReadCluster
func NewReadClusterRequest(server string, siteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fed/v1/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSiteAccountRequest generates requests for DeleteSiteAccount
func NewDeleteSiteAccountRequest(server string, siteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/account", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSiteAccountRequest generates requests for ReadSiteAccount
func NewReadSiteAccountRequest(server string, siteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/account", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSiteAccountRequest generates requests for CreateSiteAccount
func NewCreateSiteAccountRequest(server string, siteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/account", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAccountAccessKeysRequest generates requests for ListAccountAccessKeys
func NewListAccountAccessKeysRequest(server string, siteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/account/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAccountAccessKeyRequest generates requests for CreateAccountAccessKey
func NewCreateAccountAccessKeyRequest(server string, siteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/account/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAccountAccessKeyRequest generates requests for DeleteAccountAccessKey
func NewDeleteAccountAccessKeyRequest(server string, siteId string, accountKeyId AccessKeyID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account_key_id", runtime.ParamLocationPath, accountKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/account/keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadAccountAccessKeyRequest generates requests for ReadAccountAccessKey
func NewReadAccountAccessKeyRequest(server string, siteId string, accountKeyId AccessKeyID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "account_key_id", runtime.ParamLocationPath, accountKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/account/keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPermissionsRequest generates requests for ListPermissions
func NewListPermissionsRequest(server string, siteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePermissionRequest calls the generic CreatePermission builder with application/json body
func NewCreatePermissionRequest(server string, siteId string, body CreatePermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePermissionRequestWithBody(server, siteId, "application/json", bodyReader)
}

// NewCreatePermissionRequestWithBody generates requests for CreatePermission with any type of body
func NewCreatePermissionRequestWithBody(server string, siteId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePermissionRequest generates requests for DeletePermission
func NewDeletePermissionRequest(server string, siteId string, permissionId PermissionID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "permission_id", runtime.ParamLocationPath, permissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/permissions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadPermissionRequest generates requests for ReadPermission
func NewReadPermissionRequest(server string, siteId string, permissionId PermissionID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "permission_id", runtime.ParamLocationPath, permissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/permissions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePermissionRequest calls the generic UpdatePermission builder with application/json body
func NewUpdatePermissionRequest(server string, siteId string, permissionId PermissionID, body UpdatePermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePermissionRequestWithBody(server, siteId, permissionId, "application/json", bodyReader)
}

// NewUpdatePermissionRequestWithBody generates requests for UpdatePermission with any type of body
func NewUpdatePermissionRequestWithBody(server string, siteId string, permissionId PermissionID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "permission_id", runtime.ParamLocationPath, permissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/permissions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPermissionAccessKeysRequest generates requests for ListPermissionAccessKeys
func NewListPermissionAccessKeysRequest(server string, siteId string, permissionId PermissionID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "permission_id", runtime.ParamLocationPath, permissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/permissions/%s/keys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePermissionAccessKeyRequest generates requests for CreatePermissionAccessKey
func NewCreatePermissionAccessKeyRequest(server string, siteId string, permissionId PermissionID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "permission_id", runtime.ParamLocationPath, permissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/permissions/%s/keys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePermissionAccessKeyRequest generates requests for DeletePermissionAccessKey
func NewDeletePermissionAccessKeyRequest(server string, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "permission_id", runtime.ParamLocationPath, permissionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "permission_key_id", runtime.ParamLocationPath, permissionKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/permissions/%s/keys/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadPermissionAccessKeyRequest generates requests for ReadPermissionAccessKey
func NewReadPermissionAccessKeyRequest(server string, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "permission_id", runtime.ParamLocationPath, permissionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "permission_key_id", runtime.ParamLocationPath, permissionKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/permissions/%s/keys/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSiteStatusRequest generates requests for ReadSiteStatus
func NewReadSiteStatusRequest(server string, siteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "site_id", runtime.ParamLocationPath, siteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteBucket request with any body
	DeleteBucketWithBodyWithResponse(ctx context.Context, bucketName BucketName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteBucketResponse, error)

	DeleteBucketWithResponse(ctx context.Context, bucketName BucketName, body DeleteBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteBucketResponse, error)

	// CreateBucket request with any body
	CreateBucketWithBodyWithResponse(ctx context.Context, bucketName BucketName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBucketResponse, error)

	CreateBucketWithResponse(ctx context.Context, bucketName BucketName, body CreateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBucketResponse, error)

	// ListClusters request
	ListClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListClustersResponse, error)

	// ReadCluster request
	ReadClusterWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*ReadClusterResponse, error)

	// DeleteSiteAccount request
	DeleteSiteAccountWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*DeleteSiteAccountResponse, error)

	// ReadSiteAccount request
	ReadSiteAccountWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*ReadSiteAccountResponse, error)

	// CreateSiteAccount request
	CreateSiteAccountWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*CreateSiteAccountResponse, error)

	// ListAccountAccessKeys request
	ListAccountAccessKeysWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*ListAccountAccessKeysResponse, error)

	// CreateAccountAccessKey request
	CreateAccountAccessKeyWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*CreateAccountAccessKeyResponse, error)

	// DeleteAccountAccessKey request
	DeleteAccountAccessKeyWithResponse(ctx context.Context, siteId string, accountKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*DeleteAccountAccessKeyResponse, error)

	// ReadAccountAccessKey request
	ReadAccountAccessKeyWithResponse(ctx context.Context, siteId string, accountKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*ReadAccountAccessKeyResponse, error)

	// ListPermissions request
	ListPermissionsWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*ListPermissionsResponse, error)

	// CreatePermission request with any body
	CreatePermissionWithBodyWithResponse(ctx context.Context, siteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePermissionResponse, error)

	CreatePermissionWithResponse(ctx context.Context, siteId string, body CreatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePermissionResponse, error)

	// DeletePermission request
	DeletePermissionWithResponse(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*DeletePermissionResponse, error)

	// ReadPermission request
	ReadPermissionWithResponse(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*ReadPermissionResponse, error)

	// UpdatePermission request with any body
	UpdatePermissionWithBodyWithResponse(ctx context.Context, siteId string, permissionId PermissionID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePermissionResponse, error)

	UpdatePermissionWithResponse(ctx context.Context, siteId string, permissionId PermissionID, body UpdatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePermissionResponse, error)

	// ListPermissionAccessKeys request
	ListPermissionAccessKeysWithResponse(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*ListPermissionAccessKeysResponse, error)

	// CreatePermissionAccessKey request
	CreatePermissionAccessKeyWithResponse(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*CreatePermissionAccessKeyResponse, error)

	// DeletePermissionAccessKey request
	DeletePermissionAccessKeyWithResponse(ctx context.Context, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*DeletePermissionAccessKeyResponse, error)

	// ReadPermissionAccessKey request
	ReadPermissionAccessKeyWithResponse(ctx context.Context, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*ReadPermissionAccessKeyResponse, error)

	// ReadSiteStatus request
	ReadSiteStatusWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*ReadSiteStatusResponse, error)
}

type DeleteBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *CreateBucketResponseBody
	JSON400      *Error400
	JSON409      *Error409
}

// Status returns HTTPResponse.Status
func (r DeleteBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r DeleteBucketResponse) Result() error {
	return eCoalesce(r.JSON204, r.JSON400, r.JSON409, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r DeleteBucketResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type CreateBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateBucketResponseBody
	JSON400      *Error400
	JSON404      *Error404
	JSON409      *Error409
}

// Status returns HTTPResponse.Status
func (r CreateBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r CreateBucketResponse) Result() (*CreateBucketResponseBody, error) {
	return r.JSON201, eCoalesce(r.JSON400, r.JSON404, r.JSON409, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r CreateBucketResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type ListClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListClustersResponseBody
	JSON401      *Error401
}

// Status returns HTTPResponse.Status
func (r ListClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r ListClustersResponse) Result() (*ListClustersResponseBody, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r ListClustersResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type ReadClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReadClusterResponseBody
	JSON401      *Error401
	JSON404      *Error404
}

// Status returns HTTPResponse.Status
func (r ReadClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r ReadClusterResponse) Result() (*ReadClusterResponseBody, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r ReadClusterResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type DeleteSiteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error401
	JSON409      *Error409
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r DeleteSiteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSiteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r DeleteSiteAccountResponse) Result() error {
	return eCoalesce(r.JSON401, r.JSON409, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r DeleteSiteAccountResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type ReadSiteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountResponseBody
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r ReadSiteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSiteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r ReadSiteAccountResponse) Result() (*AccountResponseBody, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r ReadSiteAccountResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type CreateSiteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AccountResponseBody
	JSON401      *Error401
	JSON403      *Error403
	JSON409      *Error409
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r CreateSiteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSiteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r CreateSiteAccountResponse) Result() (*AccountResponseBody, error) {
	return r.JSON201, eCoalesce(r.JSON401, r.JSON403, r.JSON409, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r CreateSiteAccountResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type ListAccountAccessKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountKeysResponseBody
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r ListAccountAccessKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAccountAccessKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r ListAccountAccessKeysResponse) Result() (*AccountKeysResponseBody, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r ListAccountAccessKeysResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type CreateAccountAccessKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AccountKeyResponseBody
	JSON401      *Error401
	JSON404      *Error404
	JSON409      *Error409
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r CreateAccountAccessKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountAccessKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r CreateAccountAccessKeyResponse) Result() (*AccountKeyResponseBody, error) {
	return r.JSON201, eCoalesce(r.JSON401, r.JSON404, r.JSON409, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r CreateAccountAccessKeyResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type DeleteAccountAccessKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error401
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r DeleteAccountAccessKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountAccessKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r DeleteAccountAccessKeyResponse) Result() error {
	return eCoalesce(r.JSON401, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r DeleteAccountAccessKeyResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type ReadAccountAccessKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountKeyResponseBody
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r ReadAccountAccessKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadAccountAccessKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r ReadAccountAccessKeyResponse) Result() (*AccountKeyResponseBody, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r ReadAccountAccessKeyResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type ListPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionsResponseBody
	JSON401      *Error401
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r ListPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r ListPermissionsResponse) Result() (*PermissionsResponseBody, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r ListPermissionsResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type CreatePermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PermissionResponseBody
	JSON401      *Error401
	JSON404      *Error404
	JSON409      *Error409
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r CreatePermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r CreatePermissionResponse) Result() (*PermissionResponseBody, error) {
	return r.JSON201, eCoalesce(r.JSON401, r.JSON404, r.JSON409, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r CreatePermissionResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type DeletePermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error401
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r DeletePermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r DeletePermissionResponse) Result() error {
	return eCoalesce(r.JSON401, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r DeletePermissionResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type ReadPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionResponseBody
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r ReadPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r ReadPermissionResponse) Result() (*PermissionResponseBody, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r ReadPermissionResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type UpdatePermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionResponseBody
	JSON401      *Error401
	JSON404      *Error404
	JSON409      *Error409
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r UpdatePermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r UpdatePermissionResponse) Result() (*PermissionResponseBody, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSON409, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r UpdatePermissionResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type ListPermissionAccessKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionKeysResponseBody
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r ListPermissionAccessKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPermissionAccessKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r ListPermissionAccessKeysResponse) Result() (*PermissionKeysResponseBody, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r ListPermissionAccessKeysResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type CreatePermissionAccessKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PermissionKeyResponseBody
	JSON401      *Error401
	JSON404      *Error404
	JSON409      *Error409
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r CreatePermissionAccessKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePermissionAccessKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r CreatePermissionAccessKeyResponse) Result() (*PermissionKeyResponseBody, error) {
	return r.JSON201, eCoalesce(r.JSON401, r.JSON404, r.JSON409, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r CreatePermissionAccessKeyResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type DeletePermissionAccessKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r DeletePermissionAccessKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePermissionAccessKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r DeletePermissionAccessKeyResponse) Result() error {
	return eCoalesce(r.JSON401, r.JSON404, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r DeletePermissionAccessKeyResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type ReadPermissionAccessKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionKeyResponseBody
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r ReadPermissionAccessKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadPermissionAccessKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r ReadPermissionAccessKeyResponse) Result() (*PermissionKeyResponseBody, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r ReadPermissionAccessKeyResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

type ReadSiteStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusResponseBody
	JSON401      *Error401
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r ReadSiteStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSiteStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r ReadSiteStatusResponse) Result() (*StatusResponseBody, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSONDefault, r.UndefinedError())
}

// UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
func (r ReadSiteStatusResponse) UndefinedError() error {
	if !isOKStatus(r.HTTPResponse.StatusCode) {
		return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
	}
	return nil
}

// DeleteBucketWithBodyWithResponse request with arbitrary body returning *DeleteBucketResponse
func (c *ClientWithResponses) DeleteBucketWithBodyWithResponse(ctx context.Context, bucketName BucketName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteBucketResponse, error) {
	rsp, err := c.DeleteBucketWithBody(ctx, bucketName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBucketResponse(rsp)
}

func (c *ClientWithResponses) DeleteBucketWithResponse(ctx context.Context, bucketName BucketName, body DeleteBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteBucketResponse, error) {
	rsp, err := c.DeleteBucket(ctx, bucketName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBucketResponse(rsp)
}

// CreateBucketWithBodyWithResponse request with arbitrary body returning *CreateBucketResponse
func (c *ClientWithResponses) CreateBucketWithBodyWithResponse(ctx context.Context, bucketName BucketName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBucketResponse, error) {
	rsp, err := c.CreateBucketWithBody(ctx, bucketName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBucketResponse(rsp)
}

func (c *ClientWithResponses) CreateBucketWithResponse(ctx context.Context, bucketName BucketName, body CreateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBucketResponse, error) {
	rsp, err := c.CreateBucket(ctx, bucketName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBucketResponse(rsp)
}

// ListClustersWithResponse request returning *ListClustersResponse
func (c *ClientWithResponses) ListClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListClustersResponse, error) {
	rsp, err := c.ListClusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListClustersResponse(rsp)
}

// ReadClusterWithResponse request returning *ReadClusterResponse
func (c *ClientWithResponses) ReadClusterWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*ReadClusterResponse, error) {
	rsp, err := c.ReadCluster(ctx, siteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadClusterResponse(rsp)
}

// DeleteSiteAccountWithResponse request returning *DeleteSiteAccountResponse
func (c *ClientWithResponses) DeleteSiteAccountWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*DeleteSiteAccountResponse, error) {
	rsp, err := c.DeleteSiteAccount(ctx, siteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSiteAccountResponse(rsp)
}

// ReadSiteAccountWithResponse request returning *ReadSiteAccountResponse
func (c *ClientWithResponses) ReadSiteAccountWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*ReadSiteAccountResponse, error) {
	rsp, err := c.ReadSiteAccount(ctx, siteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSiteAccountResponse(rsp)
}

// CreateSiteAccountWithResponse request returning *CreateSiteAccountResponse
func (c *ClientWithResponses) CreateSiteAccountWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*CreateSiteAccountResponse, error) {
	rsp, err := c.CreateSiteAccount(ctx, siteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSiteAccountResponse(rsp)
}

// ListAccountAccessKeysWithResponse request returning *ListAccountAccessKeysResponse
func (c *ClientWithResponses) ListAccountAccessKeysWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*ListAccountAccessKeysResponse, error) {
	rsp, err := c.ListAccountAccessKeys(ctx, siteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAccountAccessKeysResponse(rsp)
}

// CreateAccountAccessKeyWithResponse request returning *CreateAccountAccessKeyResponse
func (c *ClientWithResponses) CreateAccountAccessKeyWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*CreateAccountAccessKeyResponse, error) {
	rsp, err := c.CreateAccountAccessKey(ctx, siteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountAccessKeyResponse(rsp)
}

// DeleteAccountAccessKeyWithResponse request returning *DeleteAccountAccessKeyResponse
func (c *ClientWithResponses) DeleteAccountAccessKeyWithResponse(ctx context.Context, siteId string, accountKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*DeleteAccountAccessKeyResponse, error) {
	rsp, err := c.DeleteAccountAccessKey(ctx, siteId, accountKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountAccessKeyResponse(rsp)
}

// ReadAccountAccessKeyWithResponse request returning *ReadAccountAccessKeyResponse
func (c *ClientWithResponses) ReadAccountAccessKeyWithResponse(ctx context.Context, siteId string, accountKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*ReadAccountAccessKeyResponse, error) {
	rsp, err := c.ReadAccountAccessKey(ctx, siteId, accountKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadAccountAccessKeyResponse(rsp)
}

// ListPermissionsWithResponse request returning *ListPermissionsResponse
func (c *ClientWithResponses) ListPermissionsWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*ListPermissionsResponse, error) {
	rsp, err := c.ListPermissions(ctx, siteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPermissionsResponse(rsp)
}

// CreatePermissionWithBodyWithResponse request with arbitrary body returning *CreatePermissionResponse
func (c *ClientWithResponses) CreatePermissionWithBodyWithResponse(ctx context.Context, siteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePermissionResponse, error) {
	rsp, err := c.CreatePermissionWithBody(ctx, siteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePermissionResponse(rsp)
}

func (c *ClientWithResponses) CreatePermissionWithResponse(ctx context.Context, siteId string, body CreatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePermissionResponse, error) {
	rsp, err := c.CreatePermission(ctx, siteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePermissionResponse(rsp)
}

// DeletePermissionWithResponse request returning *DeletePermissionResponse
func (c *ClientWithResponses) DeletePermissionWithResponse(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*DeletePermissionResponse, error) {
	rsp, err := c.DeletePermission(ctx, siteId, permissionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePermissionResponse(rsp)
}

// ReadPermissionWithResponse request returning *ReadPermissionResponse
func (c *ClientWithResponses) ReadPermissionWithResponse(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*ReadPermissionResponse, error) {
	rsp, err := c.ReadPermission(ctx, siteId, permissionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadPermissionResponse(rsp)
}

// UpdatePermissionWithBodyWithResponse request with arbitrary body returning *UpdatePermissionResponse
func (c *ClientWithResponses) UpdatePermissionWithBodyWithResponse(ctx context.Context, siteId string, permissionId PermissionID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePermissionResponse, error) {
	rsp, err := c.UpdatePermissionWithBody(ctx, siteId, permissionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePermissionResponse(rsp)
}

func (c *ClientWithResponses) UpdatePermissionWithResponse(ctx context.Context, siteId string, permissionId PermissionID, body UpdatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePermissionResponse, error) {
	rsp, err := c.UpdatePermission(ctx, siteId, permissionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePermissionResponse(rsp)
}

// ListPermissionAccessKeysWithResponse request returning *ListPermissionAccessKeysResponse
func (c *ClientWithResponses) ListPermissionAccessKeysWithResponse(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*ListPermissionAccessKeysResponse, error) {
	rsp, err := c.ListPermissionAccessKeys(ctx, siteId, permissionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPermissionAccessKeysResponse(rsp)
}

// CreatePermissionAccessKeyWithResponse request returning *CreatePermissionAccessKeyResponse
func (c *ClientWithResponses) CreatePermissionAccessKeyWithResponse(ctx context.Context, siteId string, permissionId PermissionID, reqEditors ...RequestEditorFn) (*CreatePermissionAccessKeyResponse, error) {
	rsp, err := c.CreatePermissionAccessKey(ctx, siteId, permissionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePermissionAccessKeyResponse(rsp)
}

// DeletePermissionAccessKeyWithResponse request returning *DeletePermissionAccessKeyResponse
func (c *ClientWithResponses) DeletePermissionAccessKeyWithResponse(ctx context.Context, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*DeletePermissionAccessKeyResponse, error) {
	rsp, err := c.DeletePermissionAccessKey(ctx, siteId, permissionId, permissionKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePermissionAccessKeyResponse(rsp)
}

// ReadPermissionAccessKeyWithResponse request returning *ReadPermissionAccessKeyResponse
func (c *ClientWithResponses) ReadPermissionAccessKeyWithResponse(ctx context.Context, siteId string, permissionId PermissionID, permissionKeyId AccessKeyID, reqEditors ...RequestEditorFn) (*ReadPermissionAccessKeyResponse, error) {
	rsp, err := c.ReadPermissionAccessKey(ctx, siteId, permissionId, permissionKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadPermissionAccessKeyResponse(rsp)
}

// ReadSiteStatusWithResponse request returning *ReadSiteStatusResponse
func (c *ClientWithResponses) ReadSiteStatusWithResponse(ctx context.Context, siteId string, reqEditors ...RequestEditorFn) (*ReadSiteStatusResponse, error) {
	rsp, err := c.ReadSiteStatus(ctx, siteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSiteStatusResponse(rsp)
}

// ParseDeleteBucketResponse parses an HTTP response from a DeleteBucketWithResponse call
func ParseDeleteBucketResponse(rsp *http.Response) (*DeleteBucketResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest CreateBucketResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCreateBucketResponse parses an HTTP response from a CreateBucketWithResponse call
func ParseCreateBucketResponse(rsp *http.Response) (*CreateBucketResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateBucketResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseListClustersResponse parses an HTTP response from a ListClustersWithResponse call
func ParseListClustersResponse(rsp *http.Response) (*ListClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListClustersResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseReadClusterResponse parses an HTTP response from a ReadClusterWithResponse call
func ParseReadClusterResponse(rsp *http.Response) (*ReadClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReadClusterResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteSiteAccountResponse parses an HTTP response from a DeleteSiteAccountWithResponse call
func ParseDeleteSiteAccountResponse(rsp *http.Response) (*DeleteSiteAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSiteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReadSiteAccountResponse parses an HTTP response from a ReadSiteAccountWithResponse call
func ParseReadSiteAccountResponse(rsp *http.Response) (*ReadSiteAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSiteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSiteAccountResponse parses an HTTP response from a CreateSiteAccountWithResponse call
func ParseCreateSiteAccountResponse(rsp *http.Response) (*CreateSiteAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSiteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccountResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListAccountAccessKeysResponse parses an HTTP response from a ListAccountAccessKeysWithResponse call
func ParseListAccountAccessKeysResponse(rsp *http.Response) (*ListAccountAccessKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAccountAccessKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountKeysResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAccountAccessKeyResponse parses an HTTP response from a CreateAccountAccessKeyWithResponse call
func ParseCreateAccountAccessKeyResponse(rsp *http.Response) (*CreateAccountAccessKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountAccessKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccountKeyResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAccountAccessKeyResponse parses an HTTP response from a DeleteAccountAccessKeyWithResponse call
func ParseDeleteAccountAccessKeyResponse(rsp *http.Response) (*DeleteAccountAccessKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountAccessKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReadAccountAccessKeyResponse parses an HTTP response from a ReadAccountAccessKeyWithResponse call
func ParseReadAccountAccessKeyResponse(rsp *http.Response) (*ReadAccountAccessKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadAccountAccessKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountKeyResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListPermissionsResponse parses an HTTP response from a ListPermissionsWithResponse call
func ParseListPermissionsResponse(rsp *http.Response) (*ListPermissionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionsResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreatePermissionResponse parses an HTTP response from a CreatePermissionWithResponse call
func ParseCreatePermissionResponse(rsp *http.Response) (*CreatePermissionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PermissionResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeletePermissionResponse parses an HTTP response from a DeletePermissionWithResponse call
func ParseDeletePermissionResponse(rsp *http.Response) (*DeletePermissionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReadPermissionResponse parses an HTTP response from a ReadPermissionWithResponse call
func ParseReadPermissionResponse(rsp *http.Response) (*ReadPermissionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdatePermissionResponse parses an HTTP response from a UpdatePermissionWithResponse call
func ParseUpdatePermissionResponse(rsp *http.Response) (*UpdatePermissionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListPermissionAccessKeysResponse parses an HTTP response from a ListPermissionAccessKeysWithResponse call
func ParseListPermissionAccessKeysResponse(rsp *http.Response) (*ListPermissionAccessKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPermissionAccessKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionKeysResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreatePermissionAccessKeyResponse parses an HTTP response from a CreatePermissionAccessKeyWithResponse call
func ParseCreatePermissionAccessKeyResponse(rsp *http.Response) (*CreatePermissionAccessKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePermissionAccessKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PermissionKeyResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeletePermissionAccessKeyResponse parses an HTTP response from a DeletePermissionAccessKeyWithResponse call
func ParseDeletePermissionAccessKeyResponse(rsp *http.Response) (*DeletePermissionAccessKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePermissionAccessKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReadPermissionAccessKeyResponse parses an HTTP response from a ReadPermissionAccessKeyWithResponse call
func ParseReadPermissionAccessKeyResponse(rsp *http.Response) (*ReadPermissionAccessKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadPermissionAccessKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionKeyResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReadSiteStatusResponse parses an HTTP response from a ReadSiteStatusWithResponse call
func ParseReadSiteStatusResponse(rsp *http.Response) (*ReadSiteStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSiteStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
