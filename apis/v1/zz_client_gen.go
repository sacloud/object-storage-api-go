// Copyright 2022 The sacloud/object-storage-api-go authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteAccount request
	DeleteAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccount request
	GetAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccount request
	PostAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountKeys request
	GetAccountKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountKeys request
	PostAccountKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccountKeysId request
	DeleteAccountKeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountKeysId request
	GetAccountKeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBucketsName request with any body
	DeleteBucketsNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteBucketsName(ctx context.Context, name string, body DeleteBucketsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBucketsName request with any body
	PutBucketsNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBucketsName(ctx context.Context, name string, body PutBucketsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusters request
	GetClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClustersId request
	GetClustersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissions request
	GetPermissions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPermissions request with any body
	PostPermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPermissions(ctx context.Context, body PostPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePermissionsId request
	DeletePermissionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionsId request
	GetPermissionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPermissionsId request with any body
	PutPermissionsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPermissionsId(ctx context.Context, id string, body PutPermissionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionsIdKeys request
	GetPermissionsIdKeys(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPermissionsIdKeys request
	PostPermissionsIdKeys(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePermissionsIdKeysKeyId request
	DeletePermissionsIdKeysKeyId(ctx context.Context, id string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionsIdKeysKeyId request
	GetPermissionsIdKeysKeyId(ctx context.Context, id string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountKeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountKeysIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountKeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountKeysIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBucketsNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBucketsNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBucketsName(ctx context.Context, name string, body DeleteBucketsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBucketsNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBucketsNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBucketsNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBucketsName(ctx context.Context, name string, body PutBucketsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBucketsNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClustersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPermissionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPermissions(ctx context.Context, body PostPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPermissionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePermissionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePermissionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPermissionsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPermissionsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPermissionsId(ctx context.Context, id string, body PutPermissionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPermissionsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionsIdKeys(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsIdKeysRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPermissionsIdKeys(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPermissionsIdKeysRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePermissionsIdKeysKeyId(ctx context.Context, id string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePermissionsIdKeysKeyIdRequest(c.Server, id, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionsIdKeysKeyId(ctx context.Context, id string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsIdKeysKeyIdRequest(c.Server, id, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteAccountRequest generates requests for DeleteAccount
func NewDeleteAccountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountRequest generates requests for GetAccount
func NewGetAccountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountRequest generates requests for PostAccount
func NewPostAccountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountKeysRequest generates requests for GetAccountKeys
func NewGetAccountKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountKeysRequest generates requests for PostAccountKeys
func NewPostAccountKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAccountKeysIdRequest generates requests for DeleteAccountKeysId
func NewDeleteAccountKeysIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountKeysIdRequest generates requests for GetAccountKeysId
func NewGetAccountKeysIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteBucketsNameRequest calls the generic DeleteBucketsName builder with application/json body
func NewDeleteBucketsNameRequest(server string, name string, body DeleteBucketsNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteBucketsNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewDeleteBucketsNameRequestWithBody generates requests for DeleteBucketsName with any type of body
func NewDeleteBucketsNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/buckets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBucketsNameRequest calls the generic PutBucketsName builder with application/json body
func NewPutBucketsNameRequest(server string, name string, body PutBucketsNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBucketsNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPutBucketsNameRequestWithBody generates requests for PutBucketsName with any type of body
func NewPutBucketsNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/buckets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClustersRequest generates requests for GetClusters
func NewGetClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClustersIdRequest generates requests for GetClustersId
func NewGetClustersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionsRequest generates requests for GetPermissions
func NewGetPermissionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPermissionsRequest calls the generic PostPermissions builder with application/json body
func NewPostPermissionsRequest(server string, body PostPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPermissionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPermissionsRequestWithBody generates requests for PostPermissions with any type of body
func NewPostPermissionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePermissionsIdRequest generates requests for DeletePermissionsId
func NewDeletePermissionsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionsIdRequest generates requests for GetPermissionsId
func NewGetPermissionsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPermissionsIdRequest calls the generic PutPermissionsId builder with application/json body
func NewPutPermissionsIdRequest(server string, id string, body PutPermissionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPermissionsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPermissionsIdRequestWithBody generates requests for PutPermissionsId with any type of body
func NewPutPermissionsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPermissionsIdKeysRequest generates requests for GetPermissionsIdKeys
func NewGetPermissionsIdKeysRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPermissionsIdKeysRequest generates requests for PostPermissionsIdKeys
func NewPostPermissionsIdKeysRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePermissionsIdKeysKeyIdRequest generates requests for DeletePermissionsIdKeysKeyId
func NewDeletePermissionsIdKeysKeyIdRequest(server string, id string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/%s/keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionsIdKeysKeyIdRequest generates requests for GetPermissionsIdKeysKeyId
func NewGetPermissionsIdKeysKeyIdRequest(server string, id string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/%s/keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteAccount request
	DeleteAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error)

	// GetAccount request
	GetAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountResponse, error)

	// PostAccount request
	PostAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAccountResponse, error)

	// GetAccountKeys request
	GetAccountKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountKeysResponse, error)

	// PostAccountKeys request
	PostAccountKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAccountKeysResponse, error)

	// DeleteAccountKeysId request
	DeleteAccountKeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAccountKeysIdResponse, error)

	// GetAccountKeysId request
	GetAccountKeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAccountKeysIdResponse, error)

	// DeleteBucketsName request with any body
	DeleteBucketsNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteBucketsNameResponse, error)

	DeleteBucketsNameWithResponse(ctx context.Context, name string, body DeleteBucketsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteBucketsNameResponse, error)

	// PutBucketsName request with any body
	PutBucketsNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBucketsNameResponse, error)

	PutBucketsNameWithResponse(ctx context.Context, name string, body PutBucketsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBucketsNameResponse, error)

	// GetClusters request
	GetClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClustersResponse, error)

	// GetClustersId request
	GetClustersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetClustersIdResponse, error)

	// GetPermissions request
	GetPermissionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsResponse, error)

	// PostPermissions request with any body
	PostPermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPermissionsResponse, error)

	PostPermissionsWithResponse(ctx context.Context, body PostPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPermissionsResponse, error)

	// DeletePermissionsId request
	DeletePermissionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePermissionsIdResponse, error)

	// GetPermissionsId request
	GetPermissionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPermissionsIdResponse, error)

	// PutPermissionsId request with any body
	PutPermissionsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPermissionsIdResponse, error)

	PutPermissionsIdWithResponse(ctx context.Context, id string, body PutPermissionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPermissionsIdResponse, error)

	// GetPermissionsIdKeys request
	GetPermissionsIdKeysWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPermissionsIdKeysResponse, error)

	// PostPermissionsIdKeys request
	PostPermissionsIdKeysWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostPermissionsIdKeysResponse, error)

	// DeletePermissionsIdKeysKeyId request
	DeletePermissionsIdKeysKeyIdWithResponse(ctx context.Context, id string, keyId string, reqEditors ...RequestEditorFn) (*DeletePermissionsIdKeysKeyIdResponse, error)

	// GetPermissionsIdKeysKeyId request
	GetPermissionsIdKeysKeyIdWithResponse(ctx context.Context, id string, keyId string, reqEditors ...RequestEditorFn) (*GetPermissionsIdKeysKeyIdResponse, error)

	// GetStatus request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)
}

type DeleteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error401
	JSON409      *Error409
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r DeleteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r DeleteAccountResponse) Result() (error) {
//     return eCoalesce(r.JSON401,r.JSON409,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r DeleteAccountResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type GetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r GetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r GetAccountResponse) Result() (*Account,error) {
//     return r.JSON200, eCoalesce(r.JSON401,r.JSON404,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r GetAccountResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type PostAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Account
	JSON401      *Error401
	JSON403      *Error403
	JSON409      *Error409
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r PostAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r PostAccountResponse) Result() (error) {
//     return eCoalesce(r.JSON201,r.JSON401,r.JSON403,r.JSON409,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r PostAccountResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type GetAccountKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountKeys
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r GetAccountKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r GetAccountKeysResponse) Result() (*AccountKeys,error) {
//     return r.JSON200, eCoalesce(r.JSON401,r.JSON404,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r GetAccountKeysResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type PostAccountKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AccountKey
	JSON401      *Error401
	JSON404      *Error404
	JSON409      *Error409
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r PostAccountKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r PostAccountKeysResponse) Result() (error) {
//     return eCoalesce(r.JSON201,r.JSON401,r.JSON404,r.JSON409,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r PostAccountKeysResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type DeleteAccountKeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error401
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r DeleteAccountKeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountKeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r DeleteAccountKeysIdResponse) Result() (error) {
//     return eCoalesce(r.JSON401,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r DeleteAccountKeysIdResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type GetAccountKeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountKey
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r GetAccountKeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountKeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r GetAccountKeysIdResponse) Result() (*AccountKey,error) {
//     return r.JSON200, eCoalesce(r.JSON401,r.JSON404,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r GetAccountKeysIdResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type DeleteBucketsNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HandlerPutBucketRes
	JSON400      *Error400
	JSON409      *Error409
}

// Status returns HTTPResponse.Status
func (r DeleteBucketsNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBucketsNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r DeleteBucketsNameResponse) Result() (error) {
//     return eCoalesce(r.JSON201,r.JSON400,r.JSON409,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r DeleteBucketsNameResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type PutBucketsNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HandlerPutBucketRes
	JSON400      *Error400
	JSON404      *Error404
	JSON409      *Error409
}

// Status returns HTTPResponse.Status
func (r PutBucketsNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBucketsNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r PutBucketsNameResponse) Result() (error) {
//     return eCoalesce(r.JSON201,r.JSON400,r.JSON404,r.JSON409,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r PutBucketsNameResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type GetClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerListClustersRes
	JSON401      *Error401
}

// Status returns HTTPResponse.Status
func (r GetClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r GetClustersResponse) Result() (*HandlerListClustersRes,error) {
//     return r.JSON200, eCoalesce(r.JSON401,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r GetClustersResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type GetClustersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerGetClusterRes
	JSON401      *Error401
	JSON404      *Error404
}

// Status returns HTTPResponse.Status
func (r GetClustersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClustersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r GetClustersIdResponse) Result() (*HandlerGetClusterRes,error) {
//     return r.JSON200, eCoalesce(r.JSON401,r.JSON404,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r GetClustersIdResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type GetPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Permission
	JSON401      *Error401
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r GetPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r GetPermissionsResponse) Result() (*Permission,error) {
//     return r.JSON200, eCoalesce(r.JSON401,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r GetPermissionsResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type PostPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Permission
	JSON401      *Error401
	JSON404      *Error404
	JSON409      *Error409
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r PostPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r PostPermissionsResponse) Result() (error) {
//     return eCoalesce(r.JSON201,r.JSON401,r.JSON404,r.JSON409,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r PostPermissionsResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type DeletePermissionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error401
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r DeletePermissionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePermissionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r DeletePermissionsIdResponse) Result() (error) {
//     return eCoalesce(r.JSON401,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r DeletePermissionsIdResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type GetPermissionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Permission
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r GetPermissionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r GetPermissionsIdResponse) Result() (*Permission,error) {
//     return r.JSON200, eCoalesce(r.JSON401,r.JSON404,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r GetPermissionsIdResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type PutPermissionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Permission
	JSON401      *Error401
	JSON404      *Error404
	JSON409      *Error409
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r PutPermissionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPermissionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r PutPermissionsIdResponse) Result() (*Permission,error) {
//     return r.JSON200, eCoalesce(r.JSON401,r.JSON404,r.JSON409,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r PutPermissionsIdResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type GetPermissionsIdKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionKey
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r GetPermissionsIdKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsIdKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r GetPermissionsIdKeysResponse) Result() (*PermissionKey,error) {
//     return r.JSON200, eCoalesce(r.JSON401,r.JSON404,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r GetPermissionsIdKeysResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type PostPermissionsIdKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PermissionKey
	JSON401      *Error401
	JSON404      *Error404
	JSON409      *Error409
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r PostPermissionsIdKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPermissionsIdKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r PostPermissionsIdKeysResponse) Result() (error) {
//     return eCoalesce(r.JSON201,r.JSON401,r.JSON404,r.JSON409,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r PostPermissionsIdKeysResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type DeletePermissionsIdKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r DeletePermissionsIdKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePermissionsIdKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r DeletePermissionsIdKeysKeyIdResponse) Result() (error) {
//     return eCoalesce(r.JSON401,r.JSON404,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r DeletePermissionsIdKeysKeyIdResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type GetPermissionsIdKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionKey
	JSON401      *Error401
	JSON404      *Error404
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r GetPermissionsIdKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsIdKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r GetPermissionsIdKeysKeyIdResponse) Result() (*PermissionKey,error) {
//     return r.JSON200, eCoalesce(r.JSON401,r.JSON404,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r GetPermissionsIdKeysKeyIdResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
	JSON401      *Error401
	JSONDefault  *ErrorDefault
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO 後で検討
// // // Result JSON200の結果、もしくは発生したエラーのいずれかを返す
// func (r GetStatusResponse) Result() (*Status,error) {
//     return r.JSON200, eCoalesce(r.JSON401,r.JSONDefault,r.UndefinedError())
// }
//
// // UndefinedError API定義で未定義なエラーステータスコードを受け取った場合にエラーを返す
// func (r GetStatusResponse) UndefinedError() error {
//     if !isOKStatus(r.HTTPResponse.StatusCode){
//         return fmt.Errorf("unknown error: code:%d, body:%s", r.HTTPResponse.StatusCode, string(r.Body))
//     }
//     return nil
// }

// DeleteAccountWithResponse request returning *DeleteAccountResponse
func (c *ClientWithResponses) DeleteAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error) {
	rsp, err := c.DeleteAccount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountResponse(rsp)
}

// GetAccountWithResponse request returning *GetAccountResponse
func (c *ClientWithResponses) GetAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountResponse, error) {
	rsp, err := c.GetAccount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountResponse(rsp)
}

// PostAccountWithResponse request returning *PostAccountResponse
func (c *ClientWithResponses) PostAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAccountResponse, error) {
	rsp, err := c.PostAccount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountResponse(rsp)
}

// GetAccountKeysWithResponse request returning *GetAccountKeysResponse
func (c *ClientWithResponses) GetAccountKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountKeysResponse, error) {
	rsp, err := c.GetAccountKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountKeysResponse(rsp)
}

// PostAccountKeysWithResponse request returning *PostAccountKeysResponse
func (c *ClientWithResponses) PostAccountKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAccountKeysResponse, error) {
	rsp, err := c.PostAccountKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountKeysResponse(rsp)
}

// DeleteAccountKeysIdWithResponse request returning *DeleteAccountKeysIdResponse
func (c *ClientWithResponses) DeleteAccountKeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAccountKeysIdResponse, error) {
	rsp, err := c.DeleteAccountKeysId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountKeysIdResponse(rsp)
}

// GetAccountKeysIdWithResponse request returning *GetAccountKeysIdResponse
func (c *ClientWithResponses) GetAccountKeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAccountKeysIdResponse, error) {
	rsp, err := c.GetAccountKeysId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountKeysIdResponse(rsp)
}

// DeleteBucketsNameWithBodyWithResponse request with arbitrary body returning *DeleteBucketsNameResponse
func (c *ClientWithResponses) DeleteBucketsNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteBucketsNameResponse, error) {
	rsp, err := c.DeleteBucketsNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBucketsNameResponse(rsp)
}

func (c *ClientWithResponses) DeleteBucketsNameWithResponse(ctx context.Context, name string, body DeleteBucketsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteBucketsNameResponse, error) {
	rsp, err := c.DeleteBucketsName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBucketsNameResponse(rsp)
}

// PutBucketsNameWithBodyWithResponse request with arbitrary body returning *PutBucketsNameResponse
func (c *ClientWithResponses) PutBucketsNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBucketsNameResponse, error) {
	rsp, err := c.PutBucketsNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBucketsNameResponse(rsp)
}

func (c *ClientWithResponses) PutBucketsNameWithResponse(ctx context.Context, name string, body PutBucketsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBucketsNameResponse, error) {
	rsp, err := c.PutBucketsName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBucketsNameResponse(rsp)
}

// GetClustersWithResponse request returning *GetClustersResponse
func (c *ClientWithResponses) GetClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClustersResponse, error) {
	rsp, err := c.GetClusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersResponse(rsp)
}

// GetClustersIdWithResponse request returning *GetClustersIdResponse
func (c *ClientWithResponses) GetClustersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetClustersIdResponse, error) {
	rsp, err := c.GetClustersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersIdResponse(rsp)
}

// GetPermissionsWithResponse request returning *GetPermissionsResponse
func (c *ClientWithResponses) GetPermissionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsResponse, error) {
	rsp, err := c.GetPermissions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsResponse(rsp)
}

// PostPermissionsWithBodyWithResponse request with arbitrary body returning *PostPermissionsResponse
func (c *ClientWithResponses) PostPermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPermissionsResponse, error) {
	rsp, err := c.PostPermissionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PostPermissionsWithResponse(ctx context.Context, body PostPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPermissionsResponse, error) {
	rsp, err := c.PostPermissions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPermissionsResponse(rsp)
}

// DeletePermissionsIdWithResponse request returning *DeletePermissionsIdResponse
func (c *ClientWithResponses) DeletePermissionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePermissionsIdResponse, error) {
	rsp, err := c.DeletePermissionsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePermissionsIdResponse(rsp)
}

// GetPermissionsIdWithResponse request returning *GetPermissionsIdResponse
func (c *ClientWithResponses) GetPermissionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPermissionsIdResponse, error) {
	rsp, err := c.GetPermissionsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsIdResponse(rsp)
}

// PutPermissionsIdWithBodyWithResponse request with arbitrary body returning *PutPermissionsIdResponse
func (c *ClientWithResponses) PutPermissionsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPermissionsIdResponse, error) {
	rsp, err := c.PutPermissionsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPermissionsIdResponse(rsp)
}

func (c *ClientWithResponses) PutPermissionsIdWithResponse(ctx context.Context, id string, body PutPermissionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPermissionsIdResponse, error) {
	rsp, err := c.PutPermissionsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPermissionsIdResponse(rsp)
}

// GetPermissionsIdKeysWithResponse request returning *GetPermissionsIdKeysResponse
func (c *ClientWithResponses) GetPermissionsIdKeysWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPermissionsIdKeysResponse, error) {
	rsp, err := c.GetPermissionsIdKeys(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsIdKeysResponse(rsp)
}

// PostPermissionsIdKeysWithResponse request returning *PostPermissionsIdKeysResponse
func (c *ClientWithResponses) PostPermissionsIdKeysWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostPermissionsIdKeysResponse, error) {
	rsp, err := c.PostPermissionsIdKeys(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPermissionsIdKeysResponse(rsp)
}

// DeletePermissionsIdKeysKeyIdWithResponse request returning *DeletePermissionsIdKeysKeyIdResponse
func (c *ClientWithResponses) DeletePermissionsIdKeysKeyIdWithResponse(ctx context.Context, id string, keyId string, reqEditors ...RequestEditorFn) (*DeletePermissionsIdKeysKeyIdResponse, error) {
	rsp, err := c.DeletePermissionsIdKeysKeyId(ctx, id, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePermissionsIdKeysKeyIdResponse(rsp)
}

// GetPermissionsIdKeysKeyIdWithResponse request returning *GetPermissionsIdKeysKeyIdResponse
func (c *ClientWithResponses) GetPermissionsIdKeysKeyIdWithResponse(ctx context.Context, id string, keyId string, reqEditors ...RequestEditorFn) (*GetPermissionsIdKeysKeyIdResponse, error) {
	rsp, err := c.GetPermissionsIdKeysKeyId(ctx, id, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsIdKeysKeyIdResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// ParseDeleteAccountResponse parses an HTTP response from a DeleteAccountWithResponse call
func ParseDeleteAccountResponse(rsp *http.Response) (*DeleteAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAccountResponse parses an HTTP response from a GetAccountWithResponse call
func ParseGetAccountResponse(rsp *http.Response) (*GetAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAccountResponse parses an HTTP response from a PostAccountWithResponse call
func ParsePostAccountResponse(rsp *http.Response) (*PostAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAccountKeysResponse parses an HTTP response from a GetAccountKeysWithResponse call
func ParseGetAccountKeysResponse(rsp *http.Response) (*GetAccountKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountKeys
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostAccountKeysResponse parses an HTTP response from a PostAccountKeysWithResponse call
func ParsePostAccountKeysResponse(rsp *http.Response) (*PostAccountKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAccountKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccountKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAccountKeysIdResponse parses an HTTP response from a DeleteAccountKeysIdWithResponse call
func ParseDeleteAccountKeysIdResponse(rsp *http.Response) (*DeleteAccountKeysIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountKeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAccountKeysIdResponse parses an HTTP response from a GetAccountKeysIdWithResponse call
func ParseGetAccountKeysIdResponse(rsp *http.Response) (*GetAccountKeysIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountKeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteBucketsNameResponse parses an HTTP response from a DeleteBucketsNameWithResponse call
func ParseDeleteBucketsNameResponse(rsp *http.Response) (*DeleteBucketsNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBucketsNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HandlerPutBucketRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePutBucketsNameResponse parses an HTTP response from a PutBucketsNameWithResponse call
func ParsePutBucketsNameResponse(rsp *http.Response) (*PutBucketsNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBucketsNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HandlerPutBucketRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetClustersResponse parses an HTTP response from a GetClustersWithResponse call
func ParseGetClustersResponse(rsp *http.Response) (*GetClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerListClustersRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetClustersIdResponse parses an HTTP response from a GetClustersIdWithResponse call
func ParseGetClustersIdResponse(rsp *http.Response) (*GetClustersIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClustersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerGetClusterRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPermissionsResponse parses an HTTP response from a GetPermissionsWithResponse call
func ParseGetPermissionsResponse(rsp *http.Response) (*GetPermissionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Permission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostPermissionsResponse parses an HTTP response from a PostPermissionsWithResponse call
func ParsePostPermissionsResponse(rsp *http.Response) (*PostPermissionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Permission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeletePermissionsIdResponse parses an HTTP response from a DeletePermissionsIdWithResponse call
func ParseDeletePermissionsIdResponse(rsp *http.Response) (*DeletePermissionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePermissionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPermissionsIdResponse parses an HTTP response from a GetPermissionsIdWithResponse call
func ParseGetPermissionsIdResponse(rsp *http.Response) (*GetPermissionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Permission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutPermissionsIdResponse parses an HTTP response from a PutPermissionsIdWithResponse call
func ParsePutPermissionsIdResponse(rsp *http.Response) (*PutPermissionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPermissionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Permission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPermissionsIdKeysResponse parses an HTTP response from a GetPermissionsIdKeysWithResponse call
func ParseGetPermissionsIdKeysResponse(rsp *http.Response) (*GetPermissionsIdKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsIdKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostPermissionsIdKeysResponse parses an HTTP response from a PostPermissionsIdKeysWithResponse call
func ParsePostPermissionsIdKeysResponse(rsp *http.Response) (*PostPermissionsIdKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPermissionsIdKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PermissionKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeletePermissionsIdKeysKeyIdResponse parses an HTTP response from a DeletePermissionsIdKeysKeyIdWithResponse call
func ParseDeletePermissionsIdKeysKeyIdResponse(rsp *http.Response) (*DeletePermissionsIdKeysKeyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePermissionsIdKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPermissionsIdKeysKeyIdResponse parses an HTTP response from a GetPermissionsIdKeysKeyIdWithResponse call
func ParseGetPermissionsIdKeysKeyIdResponse(rsp *http.Response) (*GetPermissionsIdKeysKeyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsIdKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorDefault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
