// Copyright 2022 The sacloud/object-storage-api-go authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package v1

import (
	"time"
)

// Access key ID
type AccessKeyID string

// Account info
type Account struct {
	// data type
	Data *struct {
		Code *struct {
			// Embedded struct due to allOf(#/components/schemas/Code)
			Code `yaml:",inline"`
		} `json:"code,omitempty"`
		CreatedAt *struct {
			// Embedded struct due to allOf(#/components/schemas/CreatedAt)
			CreatedAt `yaml:",inline"`
		} `json:"created_at,omitempty"`
		ResourceId *struct {
			// Embedded struct due to allOf(#/components/schemas/ResourceID)
			ResourceID `yaml:",inline"`
		} `json:"resource_id,omitempty"`
	} `json:"data,omitempty"`
}

// Bucket controls
type BucketControls []struct {
	// Bucket name
	BucketName *BucketName `json:"bucket_name,omitempty"`

	// The flag to read bucket contents
	CanRead *CanRead `json:"can_read,omitempty"`

	// The flag to write bucket contents
	CanWrite *CanWrite `json:"can_write,omitempty"`

	// Created at
	CreatedAt *CreatedAt `json:"created_at,omitempty"`
}

// Bucket name
type BucketName string

// The flag to read bucket contents
type CanRead bool

// The flag to write bucket contents
type CanWrite bool

// Code
type Code string

// Created at
type CreatedAt time.Time

// Display name
type DisplayName string

// Error400 defines model for Error400.
type Error400 struct {
	// error 400
	Error *struct {
		Code *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorCode)
			ErrorCode `yaml:",inline"`
		} `json:"code,omitempty"`
		Errors *struct {
			// Embedded struct due to allOf(#/components/schemas/Errors)
			Errors `yaml:",inline"`
		} `json:"errors,omitempty"`
		Message *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorMessage)
			ErrorMessage `yaml:",inline"`
		} `json:"message,omitempty"`
		TraceId *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorTraceId)
			ErrorTraceId `yaml:",inline"`
		} `json:"trace_id,omitempty"`
	} `json:"error,omitempty"`
}

// Error401 defines model for Error401.
type Error401 struct {
	// error 401
	Error *struct {
		Code *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorCode)
			ErrorCode `yaml:",inline"`
		} `json:"code,omitempty"`
		Errors *struct {
			// Embedded struct due to allOf(#/components/schemas/Errors)
			Errors `yaml:",inline"`
		} `json:"errors,omitempty"`
		Message *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorMessage)
			ErrorMessage `yaml:",inline"`
		} `json:"message,omitempty"`
		TraceId *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorTraceId)
			ErrorTraceId `yaml:",inline"`
		} `json:"trace_id,omitempty"`
	} `json:"error,omitempty"`
}

// Error403 defines model for Error403.
type Error403 struct {
	// error 403
	Error *struct {
		Code *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorCode)
			ErrorCode `yaml:",inline"`
		} `json:"code,omitempty"`
		Errors *struct {
			// Embedded struct due to allOf(#/components/schemas/Errors)
			Errors `yaml:",inline"`
		} `json:"errors,omitempty"`
		Message *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorMessage)
			ErrorMessage `yaml:",inline"`
		} `json:"message,omitempty"`
		TraceId *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorTraceId)
			ErrorTraceId `yaml:",inline"`
		} `json:"trace_id,omitempty"`
	} `json:"error,omitempty"`
}

// Error404 defines model for Error404.
type Error404 struct {
	// error 404
	Error *struct {
		Code *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorCode)
			ErrorCode `yaml:",inline"`
		} `json:"code,omitempty"`
		Errors *struct {
			// Embedded struct due to allOf(#/components/schemas/Errors)
			Errors `yaml:",inline"`
		} `json:"errors,omitempty"`
		Message *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorMessage)
			ErrorMessage `yaml:",inline"`
		} `json:"message,omitempty"`
		TraceId *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorTraceId)
			ErrorTraceId `yaml:",inline"`
		} `json:"trace_id,omitempty"`
	} `json:"error,omitempty"`
}

// Error409 defines model for Error409.
type Error409 struct {
	// error 409
	Error *struct {
		Code *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorCode)
			ErrorCode `yaml:",inline"`
		} `json:"code,omitempty"`
		Errors *struct {
			// Embedded struct due to allOf(#/components/schemas/Errors)
			Errors `yaml:",inline"`
		} `json:"errors,omitempty"`
		Message *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorMessage)
			ErrorMessage `yaml:",inline"`
		} `json:"message,omitempty"`
		TraceId *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorTraceId)
			ErrorTraceId `yaml:",inline"`
		} `json:"trace_id,omitempty"`
	} `json:"error,omitempty"`
}

// エラーコード。
type ErrorCode int32

// ErrorDefault defines model for ErrorDefault.
type ErrorDefault struct {
	// error 500
	Error *struct {
		Code *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorCode)
			ErrorCode `yaml:",inline"`
		} `json:"code,omitempty"`
		Errors *struct {
			// Embedded struct due to allOf(#/components/schemas/Errors)
			Errors `yaml:",inline"`
		} `json:"errors,omitempty"`
		Message *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorMessage)
			ErrorMessage `yaml:",inline"`
		} `json:"message,omitempty"`
		TraceId *struct {
			// Embedded struct due to allOf(#/components/schemas/ErrorTraceId)
			ErrorTraceId `yaml:",inline"`
		} `json:"trace_id,omitempty"`
	} `json:"error,omitempty"`
}

// エラー発生時のメッセージ内容。
// このメッセージはエラーを発生させたアプリケーションのメッセージをそのまま含む場合がある。
type ErrorMessage string

// X-Sakura-Internal-Serial-ID
type ErrorTraceId string

// 認証に関するエラーについて詳細なエラー内容を表示する。
type Errors []struct {
	Domain *struct {
		// Embedded struct due to allOf(#/components/schemas/ErrorsDomain)
		ErrorsDomain `yaml:",inline"`
	} `json:"domain,omitempty"`
	Location *struct {
		// Embedded struct due to allOf(#/components/schemas/ErrorsLocation)
		ErrorsLocation `yaml:",inline"`
	} `json:"location,omitempty"`
	LocationType *struct {
		// Embedded struct due to allOf(#/components/schemas/ErrorsLocationType)
		ErrorsLocationType `yaml:",inline"`
	} `json:"location_type,omitempty"`
	Message *struct {
		// Embedded struct due to allOf(#/components/schemas/ErrorsMessage)
		ErrorsMessage `yaml:",inline"`
	} `json:"message,omitempty"`
	Reason *struct {
		// Embedded struct due to allOf(#/components/schemas/ErrorsReason)
		ErrorsReason `yaml:",inline"`
	} `json:"reason,omitempty"`
}

// どのサービスで発生したエラーかを判別する。
// マイクロサービス名に加えてクラスター名を含む文字列が入ることを想定している。
type ErrorsDomain string

// エラー発生箇所。
// どのリソースなのか（どのリソースを操作した時に発生したものなのか）、
// どのパラメータなのかといった情報。
type ErrorsLocation string

// エラーの発生箇所の種類。
// HTTPヘッダなのかHTTPパラメータなのか、
// S3バケットなのかといったlocationの種別情報。
type ErrorsLocationType string

// エラー発生時のメッセージ内容。
// このメッセージはエラーを発生させたアプリケーションのメッセージをそのまま含む場合がある。
type ErrorsMessage string

// なぜそのエラーが発生したかがわかる情報。
// エラーメッセージの原因やエラー解決のためのヒントも含む場合がある。
type ErrorsReason string

// Permission
type Permission struct {
	// data type
	Data *[]struct {
		BucketControls *struct {
			// Embedded struct due to allOf(#/components/schemas/BucketControls)
			BucketControls `yaml:",inline"`
		} `json:"bucket_controls,omitempty"`
		CreatedAt *struct {
			// Embedded struct due to allOf(#/components/schemas/CreatedAt)
			CreatedAt `yaml:",inline"`
		} `json:"created_at,omitempty"`
		DisplayName *struct {
			// Embedded struct due to allOf(#/components/schemas/DisplayName)
			DisplayName `yaml:",inline"`
		} `json:"display_name,omitempty"`
		Id *struct {
			// Embedded struct due to allOf(#/components/schemas/PermissionID)
			PermissionID `yaml:",inline"`
		} `json:"id,omitempty"`
	} `json:"data,omitempty"`
}

// Request body for bucket controls for Permission
type PermissionBucketControlsBody struct {
	BucketControls *struct {
		// Embedded struct due to allOf(#/components/schemas/BucketControls)
		BucketControls `yaml:",inline"`
	} `json:"bucket_controls,omitempty"`
	DisplayName *struct {
		// Embedded struct due to allOf(#/components/schemas/DisplayName)
		DisplayName `yaml:",inline"`
	} `json:"display_name,omitempty"`
}

// Permission ID
type PermissionID int64

// Permission Key
type PermissionKey struct {
	// data type
	Data *struct {
		CreatedAt *struct {
			// Embedded struct due to allOf(#/components/schemas/CreatedAt)
			CreatedAt `yaml:",inline"`
		} `json:"created_at,omitempty"`
		Id *struct {
			// Embedded struct due to allOf(#/components/schemas/PermissionID)
			PermissionID `yaml:",inline"`
		} `json:"id,omitempty"`
		Secret *struct {
			// Embedded struct due to allOf(#/components/schemas/PermissionSecret)
			PermissionSecret `yaml:",inline"`
		} `json:"secret,omitempty"`
	} `json:"data,omitempty"`
}

// Permission secret key
type PermissionSecret string

// Resource ID
type ResourceID string

// Secret Access key
type SecretAccessKey string

// Status
type Status struct {
	// data type
	Data *struct {
		AcceptNew  *bool      `json:"accept_new,omitempty"`
		Message    *string    `json:"message,omitempty"`
		StartedAt  *time.Time `json:"started_at,omitempty"`
		StatusCode *struct {
			Id     *int    `json:"id,omitempty"`
			Status *string `json:"status,omitempty"`
		} `json:"status_code,omitempty"`
	} `json:"data,omitempty"`
}

// Root user access key
type AccountKey struct {
	// data type
	Data *struct {
		CreatedAt *struct {
			// Embedded struct due to allOf(#/components/schemas/CreatedAt)
			CreatedAt `yaml:",inline"`
		} `json:"created_at,omitempty"`
		Id *struct {
			// Embedded struct due to allOf(#/components/schemas/AccessKeyID)
			AccessKeyID `yaml:",inline"`
		} `json:"id,omitempty"`
		Secret *struct {
			// Embedded struct due to allOf(#/components/schemas/SecretAccessKey)
			SecretAccessKey `yaml:",inline"`
		} `json:"secret,omitempty"`
	} `json:"data,omitempty"`
}

// Root user access keys
type AccountKeys struct {
	// data type
	Data *[]struct {
		CreatedAt *struct {
			// Embedded struct due to allOf(#/components/schemas/CreatedAt)
			CreatedAt `yaml:",inline"`
		} `json:"created_at,omitempty"`
		Id *struct {
			// Embedded struct due to allOf(#/components/schemas/AccessKeyID)
			AccessKeyID `yaml:",inline"`
		} `json:"id,omitempty"`
		Secret *struct {
			// Embedded struct due to allOf(#/components/schemas/SecretAccessKey)
			SecretAccessKey `yaml:",inline"`
		} `json:"secret,omitempty"`
	} `json:"data,omitempty"`
}

// HandlerPutBucketReqBody defines model for handler.PutBucketReqBody.
type HandlerPutBucketReqBody struct {
	ClusterId string `json:"cluster_id"`
}

// HandlerGetClusterRes defines model for handler.getClusterRes.
type HandlerGetClusterRes struct {
	Data *ModelCluster `json:"data,omitempty"`
}

// HandlerListClustersRes defines model for handler.listClustersRes.
type HandlerListClustersRes struct {
	// If use a pointer type, braek output
	Data *[]ModelCluster `json:"data,omitempty"`
}

// HandlerPutBucketRes defines model for handler.putBucketRes.
type HandlerPutBucketRes struct {
	Data *ModelBucket `json:"data,omitempty"`
}

// ModelBucket defines model for model.Bucket.
type ModelBucket struct {
	ClusterId *string `json:"cluster_id,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// ModelCluster defines model for model.Cluster.
type ModelCluster struct {
	// API Servers Zones
	ApiZone *[]string `json:"api_zone,omitempty"`

	// URL of Control Panel
	ControlPanelUrl *string `json:"control_panel_url,omitempty"`

	// Display Name (en-us)
	DislpayNameEnUs *string `json:"dislpay_name_en_us,omitempty"`

	// Display Name (ja)
	DislpayNameJa *string `json:"dislpay_name_ja,omitempty"`

	// Display Name (Depending on Accept-Language)
	DisplayName *string `json:"display_name,omitempty"`

	// Display Order (Can be ignored)
	DisplayOrder *int `json:"display_order,omitempty"`

	// Endpoint Base of Cluster
	EndpointBase *string `json:"endpoint_base,omitempty"`

	// URL of IAM-compat API
	IamEndpoint *string `json:"iam_endpoint,omitempty"`

	// URL of IAM-compat API (w/ resigning)
	IamEndpointForControlPanel *string `json:"iam_endpoint_for_control_panel,omitempty"`
	Id                         *string `json:"id,omitempty"`

	// URL of S3-compat API
	S3Endpoint *string `json:"s3_endpoint,omitempty"`

	// URL of S3-compat API (w/ resigning)
	S3EndpointForControlPanel *string `json:"s3_endpoint_for_control_panel,omitempty"`

	// Storage Servers Zones
	StorageZone *[]string `json:"storage_zone,omitempty"`
}

// DeleteBucketsNameJSONBody defines parameters for DeleteBucketsName.
type DeleteBucketsNameJSONBody HandlerPutBucketReqBody

// PutBucketsNameJSONBody defines parameters for PutBucketsName.
type PutBucketsNameJSONBody HandlerPutBucketReqBody

// PostPermissionsJSONBody defines parameters for PostPermissions.
type PostPermissionsJSONBody PermissionBucketControlsBody

// PutPermissionsIdJSONBody defines parameters for PutPermissionsId.
type PutPermissionsIdJSONBody PermissionBucketControlsBody

// DeleteBucketsNameJSONRequestBody defines body for DeleteBucketsName for application/json ContentType.
type DeleteBucketsNameJSONRequestBody DeleteBucketsNameJSONBody

// PutBucketsNameJSONRequestBody defines body for PutBucketsName for application/json ContentType.
type PutBucketsNameJSONRequestBody PutBucketsNameJSONBody

// PostPermissionsJSONRequestBody defines body for PostPermissions for application/json ContentType.
type PostPermissionsJSONRequestBody PostPermissionsJSONBody

// PutPermissionsIdJSONRequestBody defines body for PutPermissionsId for application/json ContentType.
type PutPermissionsIdJSONRequestBody PutPermissionsIdJSONBody
